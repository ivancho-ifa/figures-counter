name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: release
  VCPKG_ROOT: C:\vcpkg\

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [windows-latest]
        arch: [x64]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    
    - name: Cache dependencies
      id: cache-vcpkg
      uses: actions/cache@v3
      env:
        cache-name: cache-vcpkg-packages
      with:
        path: ${{github.workspace}}/out/build/${{matrix.arch}}-${{env.BUILD_TYPE}}/vcpkg_installed
        key: ${{matrix.os}}-${{matrix.arch}}-${{env.BUILD_TYPE}}-build-${{env.cache-name}}-${{hashFiles('**/vcpkg.json')}}
    
    - name: Set the value
      run: |
        echo "PATH=" >> "$GITHUB_ENV"
        
    - name: Set-up dev env
      env:
          VCVARSALL: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
      run: ${{VCVARSALL}} ${{matrix.arch}}

    #- name: Check cl
    #  run: Get-ChildItem -Path C:\ -Include cl.exe -File -Recurse -ErrorAction SilentlyContinue

    - name: Integrate vcpkg
      run: vcpkg integrate install

    - name: Configure CMake
      run: cmake --preset ${{matrix.arch}}-${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build --preset ${{matrix.arch}}-${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/out/build/
      run: ctest --preset ${{matrix.arch}}-${{env.BUILD_TYPE}}
